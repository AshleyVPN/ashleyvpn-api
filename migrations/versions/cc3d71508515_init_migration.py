"""init migration

Revision ID: cc3d71508515
Revises: 
Create Date: 2025-04-17 15:03:09.620174

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cc3d71508515'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sources',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('src_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('src_id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('telegram_id', sa.BigInteger(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.Column('ref_id', sa.String(), nullable=True),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('ref_id'),
    sa.UniqueConstraint('telegram_id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('payment_methods',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('method_name', sa.String(), nullable=True),
    sa.Column('method_id', sa.String(), nullable=True),
    sa.Column('user', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('referals',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('parent', sa.UUID(), nullable=True),
    sa.Column('child', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['child'], ['users.id'], ),
    sa.ForeignKeyConstraint(['parent'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subscription_plans',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('billing_interval', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('has_trial', sa.Boolean(), nullable=True),
    sa.Column('trial_discount', sa.Float(), nullable=True),
    sa.Column('transfer_plan_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.String(), nullable=True),
    sa.Column('updated_at', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['transfer_plan_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('currency', sa.Enum('RUB', 'USD', 'EUR', name='currency'), nullable=True),
    sa.Column('subscription_plan_id', sa.UUID(), nullable=False),
    sa.Column('payment_method', sa.Enum('RU_DEBIT_CARD', 'SBP', 'SBERPAY', 'YOOMONEY', name='paymentmethods'), nullable=True),
    sa.Column('payment_kassa', sa.Enum('YOOKASSA', name='paymentkassa'), nullable=True),
    sa.Column('transaction_id', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('payment_metadata', sa.String(), nullable=True),
    sa.Column('last_update', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['subscription_plan_id'], ['subscription_plans.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_id')
    )
    op.create_table('prices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('subscription_plan_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('currency', sa.Enum('RUB', 'USD', 'EUR', name='currency'), nullable=True),
    sa.Column('interval', sa.Enum('MONTH', 'HALF_YEAR', 'YEAR', name='billinginterval'), nullable=True),
    sa.ForeignKeyConstraint(['subscription_plan_id'], ['subscription_plans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('quotas',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('subscription_plan_id', sa.UUID(), nullable=False),
    sa.Column('resource_type', sa.Enum('RUB', 'USD', 'EUR', name='currency'), nullable=True),
    sa.Column('limit', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['subscription_plan_id'], ['subscription_plans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subscriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('invoice_id', sa.UUID(), nullable=False),
    sa.Column('starts_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('ends_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('renewed_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('renewed_subscription_id', sa.UUID(), nullable=False),
    sa.Column('downgraded_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('downgraded_to_plan_id', sa.UUID(), nullable=False),
    sa.Column('upgraded_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('upgraded_to_plan_id', sa.UUID(), nullable=False),
    sa.Column('cancelled_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('INACTIVE', 'ACTIVE', 'UPGRADED', name='subscriptionstatus'), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['downgraded_to_plan_id'], ['subscription_plans.id'], ),
    sa.ForeignKeyConstraint(['invoice_id'], ['payments.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['subscription_plans.id'], ),
    sa.ForeignKeyConstraint(['renewed_subscription_id'], ['subscriptions.id'], ),
    sa.ForeignKeyConstraint(['upgraded_to_plan_id'], ['subscription_plans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('subscriptions')
    op.drop_table('quotas')
    op.drop_table('prices')
    op.drop_table('payments')
    op.drop_table('subscription_plans')
    op.drop_table('referals')
    op.drop_table('payment_methods')
    op.drop_table('users')
    op.drop_table('sources')
    # ### end Alembic commands ###
